version: "3.9"
services:
    web:
      build: ./dashboard-web
      healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:3000/"]
      environment: 
        AGGREGATOR_HOSTNAME: localhost
        AGGREGATOR_PORT: 7777
        API_HOSTNAME: localhost
        API_PORT: 8080
      ports:
        - "3000:80"
    database:
      build: ./dashboard-database
      environment:
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: password
        POSTGRES_DB: postgres
      volumes:
        - dbdata:/var/lib/postgresql/data
      networks:
        - apinet
    api:
      build: ./dashboard-api
      ports:
        - "8080:8080"
      healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/health"]
      # This doesn't really exist, but here for documentation reasons
      #readycheck:
        #test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/ready"]
      environment:
        DATABASE_HOSTNAME: mcmsdb
        DATABASE_PORT: 5432
        DATABASE_NAME: mcmsdb
        DATABASE_USER: mcmsuser
        DATABASE_PASSWORD: mcmsuser123!
        FRONTEND_HOSTNAME: localhost
        FRONTEND_PORT: 3000
      networks:
        - apinet
      # This makes mcmsdb resolve to database service
      links:
        - "database:mcmsdb"
      depends_on: 
        - database
    aggregatorservice:
      build: ./aggregatorservice
      environment:
        FRONTENDHOSTNAME: localhost
        FRONTENDPORT: 3000
        HTTP_PORT: 3002
      # This doesn't actually work unless curl is on the container, but whatever :)
      healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      ports:
        - "7777:3002"
    supplementalservice:
      build: ./supplementalservice
      ports:
        - "3002:3002"
      environment:
        HOSTNAME: localhost
        PORT: 3002
      healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:3002/api/v1/health"]

networks:
    apinet:
volumes:
    dbdata: